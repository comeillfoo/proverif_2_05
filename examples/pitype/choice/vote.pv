(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2023                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*)
(* Naive vote protocol
   Taken from Delaune, Jacquemard, LSV-04-1 *)

type skey.
type pkey.

(* public key encryption *)

fun pk(skey):pkey.
fun encrypt(bitstring,pkey):bitstring.
reduc forall x:bitstring, y:skey; decrypt(encrypt(x,pk(y)), y) = x.

free c:channel.
free v:bitstring [private].

process 
	(new skS:skey;
	let pkS = pk(skS) in
	out(c, pkS);
	!out(c, encrypt(v, pkS))) 
	|
	(phase 1;
	new w:bitstring;
	out(c, choice[w,v]))

(* EXPECTPV
RESULT Observational equivalence cannot be proved.
0.016s (user 0.012s + system 0.004s), max rss 10088K
END *)
