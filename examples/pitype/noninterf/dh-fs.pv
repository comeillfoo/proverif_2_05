(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2023                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*)
(* Fails because cannot handle the equational theory
   precisely enough. Use choice to prove this example successfully
   (see examples/choice/dh-fs)
*)

type G.
type exponent.

const g: G [data].
fun exp(G, exponent): G.

equation forall x: exponent, y: exponent; exp(exp(g,x),y) = exp(exp(g,y),x).

free c: channel.
free x: G [private].
free n,m,s: exponent [private].

noninterf x among (exp(exp(g,m),n), exp(g,s)).

process
	out(c, (exp(g,m), exp(g,n), x))

(* EXPECTPV
RESULT Non-interference x among (exp(exp(g,m[]),n[]), exp(g,s[])) cannot be proved.
0.014s (user 0.010s + system 0.003s), max rss 10092K
END *)
